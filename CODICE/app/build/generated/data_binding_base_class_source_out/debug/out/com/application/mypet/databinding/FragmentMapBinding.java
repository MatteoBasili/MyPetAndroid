// Generated by view binder compiler. Do not edit!
package com.application.mypet.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.application.mypet.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentMapBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView imageViewCS;

  @NonNull
  public final ImageView imageViewMap;

  @NonNull
  public final ConstraintLayout intConstLayout;

  @NonNull
  public final ScrollView scrollView;

  @NonNull
  public final TextView title;

  @NonNull
  public final DefaultToolbarBinding toolbar;

  private FragmentMapBinding(@NonNull ConstraintLayout rootView, @NonNull ImageView imageViewCS,
      @NonNull ImageView imageViewMap, @NonNull ConstraintLayout intConstLayout,
      @NonNull ScrollView scrollView, @NonNull TextView title,
      @NonNull DefaultToolbarBinding toolbar) {
    this.rootView = rootView;
    this.imageViewCS = imageViewCS;
    this.imageViewMap = imageViewMap;
    this.intConstLayout = intConstLayout;
    this.scrollView = scrollView;
    this.title = title;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentMapBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentMapBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_map, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentMapBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.imageViewCS;
      ImageView imageViewCS = ViewBindings.findChildViewById(rootView, id);
      if (imageViewCS == null) {
        break missingId;
      }

      id = R.id.imageViewMap;
      ImageView imageViewMap = ViewBindings.findChildViewById(rootView, id);
      if (imageViewMap == null) {
        break missingId;
      }

      id = R.id.int_const_layout;
      ConstraintLayout intConstLayout = ViewBindings.findChildViewById(rootView, id);
      if (intConstLayout == null) {
        break missingId;
      }

      id = R.id.scrollView;
      ScrollView scrollView = ViewBindings.findChildViewById(rootView, id);
      if (scrollView == null) {
        break missingId;
      }

      id = R.id.title;
      TextView title = ViewBindings.findChildViewById(rootView, id);
      if (title == null) {
        break missingId;
      }

      id = R.id.toolbar;
      View toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }
      DefaultToolbarBinding binding_toolbar = DefaultToolbarBinding.bind(toolbar);

      return new FragmentMapBinding((ConstraintLayout) rootView, imageViewCS, imageViewMap,
          intConstLayout, scrollView, title, binding_toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
